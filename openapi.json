{
    "openapi": "3.0.0",
    "info": {
      "title": "MultiVendor E-commerce API",
      "version": "1.0.0",
      "description": "A multivendor e-commerce REST API with Node.js, Express, and MongoDB",
      "contact": {
        "name": "API Support",
        "email": "support@multivendor.com"
      },
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "servers": [
      {
        "url": "/api",
        "description": "Development server"
      },
      {
        "url": "https://multivendor-ecommerce-api.example.com/api",
        "description": "Production server"
      }
    ],
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "schemas": {
        "Address": {
          "type": "object",
          "required": [
            "name",
            "addressLine1",
            "city",
            "state",
            "postalCode",
            "country",
            "phone"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "The address ID",
              "example": "60d0fe4f5311236168a109cb"
            },
            "user": {
              "type": "string",
              "description": "ID of the user who owns this address",
              "example": "60d0fe4f5311236168a109ca"
            },
            "name": {
              "type": "string",
              "description": "Name associated with this address",
              "example": "John Doe"
            },
            "addressLine1": {
              "type": "string",
              "description": "First line of the address",
              "example": "123 Main Street"
            },
            "addressLine2": {
              "type": "string",
              "description": "Second line of the address (optional)",
              "example": "Apt 4B"
            },
            "city": {
              "type": "string",
              "description": "City name",
              "example": "New York"
            },
            "state": {
              "type": "string",
              "description": "State or province",
              "example": "NY"
            },
            "postalCode": {
              "type": "string",
              "description": "Postal or zip code",
              "example": 10001
            },
            "country": {
              "type": "string",
              "description": "Country name",
              "example": "United States"
            },
            "phone": {
              "type": "string",
              "description": "Phone number associated with this address",
              "example": "+1 212-555-1234"
            },
            "isDefault": {
              "type": "boolean",
              "description": "Whether this is the default address",
              "default": false,
              "example": true
            },
            "type": {
              "type": "string",
              "enum": [
                "home",
                "work",
                "other"
              ],
              "default": "home",
              "description": "Type of address",
              "example": "home"
            },
            "landmark": {
              "type": "string",
              "description": "Nearby landmark for easier identification (optional)",
              "example": "Near Central Park"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the address was created"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The date and time when the address was last updated"
            }
          }
        },
        "Wishlist": {
          "type": "object",
          "required": [
            "user"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "The wishlist ID",
              "example": "60d0fe4f5311236168a109cb"
            },
            "user": {
              "type": "string",
              "description": "ID of the user who owns this wishlist",
              "example": "60d0fe4f5311236168a109ca"
            },
            "products": {
              "type": "array",
              "description": "Array of product IDs saved in the wishlist",
              "items": {
                "type": "object",
                "properties": {
                  "product": {
                    "type": "string",
                    "description": "ID reference to the product",
                    "example": "60d0fe4f5311236168a109cc"
                  },
                  "addedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date when product was added to wishlist"
                  }
                }
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the wishlist was created"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The date when the wishlist was last updated"
            }
          }
        },
        "CartItem": {
          "type": "object",
          "required": [
            "product",
            "quantity"
          ],
          "properties": {
            "product": {
              "type": "string",
              "description": "Reference to the product",
              "example": "60d0fe4f5311236168a109ca"
            },
            "quantity": {
              "type": "number",
              "description": "Quantity of the product in cart",
              "minimum": 1,
              "example": 2
            },
            "addedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the item was added to cart"
            }
          }
        },
        "Cart": {
          "type": "object",
          "required": [
            "user"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "The auto-generated ID of the cart",
              "example": "60d0fe4f5311236168a109cb"
            },
            "user": {
              "type": "string",
              "description": "Reference to the user who owns the cart",
              "example": "60d0fe4f5311236168a109cc"
            },
            "items": {
              "type": "array",
              "description": "List of items in the cart",
              "items": {
                "$ref": "#/components/schemas/CartItem"
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the cart was created"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the cart was last updated"
            }
          }
        },
        "Category": {
          "type": "object",
          "required": [
            "name",
            "createdBy"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "The auto-generated ID of the category",
              "example": "60d0fe4f5311236168a109ca"
            },
            "name": {
              "type": "string",
              "description": "The name of the category",
              "example": "Electronics"
            },
            "description": {
              "type": "string",
              "description": "The description of the category",
              "example": "Electronic gadgets and devices"
            },
            "image": {
              "type": "string",
              "description": "URL to the category image",
              "example": "https://example.com/category-image.jpg"
            },
            "isActive": {
              "type": "boolean",
              "description": "Whether the category is active",
              "example": true
            },
            "parentCategory": {
              "type": "string",
              "description": "The ID of the parent category (null for top-level categories)",
              "example": null
            },
            "level": {
              "type": "number",
              "description": "The level of the category (1 for main, 2 for subcategory, etc.)",
              "example": 1
            },
            "slug": {
              "type": "string",
              "description": "URL-friendly version of the category name",
              "example": "electronics"
            },
            "subcategories": {
              "type": "array",
              "description": "List of subcategories (populated virtually)",
              "items": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string"
                  },
                  "isActive": {
                    "type": "boolean"
                  },
                  "slug": {
                    "type": "string"
                  }
                }
              }
            },
            "createdBy": {
              "type": "string",
              "description": "ID of the user who created the category",
              "example": "60d0fe4f5311236168a109cb"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the category was created"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the category was last updated"
            }
          }
        },
        "Coupon": {
          "type": "object",
          "required": [
            "code",
            "discountType",
            "discountValue",
            "startDate",
            "endDate"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "The auto-generated ID of the coupon",
              "example": "60d0fe4f5311236168a109cb"
            },
            "code": {
              "type": "string",
              "description": "Unique coupon code",
              "example": "SUMMER20"
            },
            "description": {
              "type": "string",
              "description": "Description of the coupon",
              "example": "20% off on all summer products"
            },
            "discountType": {
              "type": "string",
              "enum": [
                "percentage",
                "fixed"
              ],
              "description": "Type of discount (percentage or fixed amount)",
              "example": "percentage"
            },
            "discountValue": {
              "type": "number",
              "description": "Value of the discount (percentage or fixed amount)",
              "example": 20
            },
            "minOrderValue": {
              "type": "number",
              "description": "Minimum order value required to apply this coupon",
              "example": 1000
            },
            "maxDiscountValue": {
              "type": "number",
              "description": "Maximum discount amount that can be applied (for percentage discounts)",
              "example": 500
            },
            "startDate": {
              "type": "string",
              "format": "date-time",
              "description": "Start date when the coupon becomes valid"
            },
            "endDate": {
              "type": "string",
              "format": "date-time",
              "description": "End date when the coupon expires"
            },
            "usageLimit": {
              "type": "number",
              "description": "Maximum number of times the coupon can be used",
              "example": 100
            },
            "usageCount": {
              "type": "number",
              "description": "Number of times the coupon has been used",
              "example": 45
            },
            "isActive": {
              "type": "boolean",
              "description": "Whether the coupon is currently active",
              "default": true,
              "example": true
            },
            "applicableProducts": {
              "type": "array",
              "description": "List of product IDs this coupon is applicable to (empty means all products)",
              "items": {
                "type": "string"
              },
              "example": []
            },
            "applicableCategories": {
              "type": "array",
              "description": "List of category IDs this coupon is applicable to (empty means all categories)",
              "items": {
                "type": "string"
              },
              "example": []
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the coupon was created"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the coupon was last updated"
            }
          }
        },
        "Order": {
          "type": "object",
          "required": [
            "orderNumber",
            "user",
            "items",
            "shippingAddress",
            "paymentMethod",
            "itemsPrice",
            "taxPrice",
            "shippingPrice",
            "totalPrice"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "The auto-generated ID of the order",
              "example": "60d0fe4f5311236168a109ca"
            },
            "orderNumber": {
              "type": "string",
              "description": "Unique order number",
              "example": "ORD-210712-1234"
            },
            "user": {
              "type": "string",
              "description": "ID of the user who placed the order",
              "example": "60d0fe4f5311236168a109cb"
            },
            "items": {
              "type": "array",
              "description": "List of items in the order",
              "items": {
                "type": "object",
                "properties": {
                  "product": {
                    "type": "string",
                    "description": "ID of the product",
                    "example": "60d0fe4f5311236168a109cc"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the product",
                    "example": "Smartphone X1"
                  },
                  "quantity": {
                    "type": "number",
                    "description": "Quantity of the product",
                    "example": 2
                  },
                  "price": {
                    "type": "number",
                    "description": "Price of the product at time of order",
                    "example": 899.99
                  },
                  "image": {
                    "type": "string",
                    "description": "URL to the product image",
                    "example": "https://example.com/product-image.jpg"
                  },
                  "seller": {
                    "type": "string",
                    "description": "ID of the seller",
                    "example": "60d0fe4f5311236168a109cd"
                  }
                }
              }
            },
            "shippingAddress": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "John Doe"
                },
                "mobile": {
                  "type": "string",
                  "example": "+1234567890"
                },
                "addressLine1": {
                  "type": "string",
                  "example": "123 Main St"
                },
                "addressLine2": {
                  "type": "string",
                  "example": "Apt 4B"
                },
                "city": {
                  "type": "string",
                  "example": "New York"
                },
                "state": {
                  "type": "string",
                  "example": "NY"
                },
                "pincode": {
                  "type": "string",
                  "example": "10001"
                },
                "country": {
                  "type": "string",
                  "example": "USA"
                }
              }
            },
            "paymentMethod": {
              "type": "string",
              "description": "Method of payment",
              "enum": [
                "cod",
                "card",
                "wallet",
                "upi",
                "netbanking"
              ],
              "example": "card"
            },
            "paymentResult": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "pay_12345"
                },
                "status": {
                  "type": "string",
                  "example": "completed"
                },
                "update_time": {
                  "type": "string",
                  "example": "2023-01-01T12:00:00Z"
                },
                "email_address": {
                  "type": "string",
                  "example": "customer@example.com"
                }
              }
            },
            "itemsPrice": {
              "type": "number",
              "description": "Total price of all items before discount",
              "example": 1799.98
            },
            "discount": {
              "type": "number",
              "description": "Discount amount applied to the order",
              "example": 200
            },
            "couponCode": {
              "type": "string",
              "description": "Coupon code used for the discount",
              "example": "SUMMER20"
            },
            "taxPrice": {
              "type": "number",
              "description": "Tax amount",
              "example": 180
            },
            "shippingPrice": {
              "type": "number",
              "description": "Shipping cost",
              "example": 15
            },
            "totalPrice": {
              "type": "number",
              "description": "Total order amount",
              "example": 1794.98
            },
            "status": {
              "type": "string",
              "description": "Current order status",
              "enum": [
                "pending",
                "processing",
                "shipped",
                "delivered",
                "cancelled",
                "returned",
                "refunded"
              ],
              "example": "processing"
            },
            "statusHistory": {
              "type": "array",
              "description": "History of status changes",
              "items": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "example": "pending"
                  },
                  "updatedBy": {
                    "type": "string",
                    "example": "60d0fe4f5311236168a109ce"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2023-01-01T10:00:00Z"
                  },
                  "comment": {
                    "type": "string",
                    "example": "Order placed successfully"
                  }
                }
              }
            },
            "isPaid": {
              "type": "boolean",
              "description": "Whether the order has been paid",
              "example": true
            },
            "paidAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the order was paid",
              "example": "2023-01-01T10:05:00Z"
            },
            "isDelivered": {
              "type": "boolean",
              "description": "Whether the order has been delivered",
              "example": false
            },
            "deliveredAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the order was delivered"
            },
            "trackingInfo": {
              "type": "object",
              "properties": {
                "courier": {
                  "type": "string",
                  "example": "FedEx"
                },
                "trackingNumber": {
                  "type": "string",
                  "example": "FX123456789"
                },
                "trackingUrl": {
                  "type": "string",
                  "example": "https://fedex.com/tracking/FX123456789"
                }
              }
            },
            "expectedDeliveryDate": {
              "type": "string",
              "format": "date-time",
              "example": "2023-01-05T18:00:00Z"
            },
            "invoiceNumber": {
              "type": "string",
              "example": "INV-2023-001234"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the order was created",
              "example": "2023-01-01T10:00:00Z"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the order was last updated",
              "example": "2023-01-01T15:30:00Z"
            }
          }
        },
        "Product": {
          "type": "object",
          "required": [
            "name",
            "description",
            "price",
            "stock",
            "category",
            "seller"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "The auto-generated ID of the product",
              "example": "60d0fe4f5311236168a109ca"
            },
            "name": {
              "type": "string",
              "description": "The name of the product",
              "example": "Smartphone X1"
            },
            "description": {
              "type": "string",
              "description": "The detailed description of the product",
              "example": "A high-performance smartphone with a 6.5-inch display and 48MP camera"
            },
            "price": {
              "type": "number",
              "description": "The original price of the product",
              "example": 999.99
            },
            "discountPrice": {
              "type": "number",
              "description": "The discounted price of the product (if available)",
              "example": 899.99
            },
            "finalPrice": {
              "type": "number",
              "description": "The final price after discount (virtual field)",
              "example": 899.99
            },
            "stock": {
              "type": "number",
              "description": "Available stock quantity",
              "example": 100
            },
            "images": {
              "type": "array",
              "description": "Array of product image URLs",
              "items": {
                "type": "string",
                "example": "https://example.com/product-image-1.jpg"
              }
            },
            "category": {
              "type": "string",
              "description": "The ID of the product category",
              "example": "60d0fe4f5311236168a109cb"
            },
            "subcategory": {
              "type": "string",
              "description": "The ID of the product subcategory (if applicable)",
              "example": "60d0fe4f5311236168a109cc"
            },
            "brand": {
              "type": "string",
              "description": "The brand name of the product",
              "example": "TechBrand"
            },
            "isActive": {
              "type": "boolean",
              "description": "Whether the product is active and can be purchased",
              "example": true
            },
            "isFeatured": {
              "type": "boolean",
              "description": "Whether the product is featured",
              "example": false
            },
            "seller": {
              "type": "string",
              "description": "The ID of the seller",
              "example": "60d0fe4f5311236168a109cd"
            },
            "sku": {
              "type": "string",
              "description": "Stock Keeping Unit - unique product identifier",
              "example": "PRD-A1B2C3-4567"
            },
            "slug": {
              "type": "string",
              "description": "URL-friendly version of the product name",
              "example": "smartphone-x1"
            },
            "averageRating": {
              "type": "number",
              "description": "Average customer rating (1-5)",
              "example": 4.7
            },
            "numberOfReviews": {
              "type": "number",
              "description": "Total number of customer reviews",
              "example": 42
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the product was created"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the product was last updated"
            }
          }
        },
        "User": {
          "type": "object",
          "required": [
            "name",
            "mobile",
            "role"
          ],
          "properties": {
            "_id": {
              "type": "string",
              "description": "The auto-generated ID of the user",
              "example": "60d0fe4f5311236168a109ca"
            },
            "name": {
              "type": "string",
              "description": "The name of the user",
              "example": "John Doe"
            },
            "mobile": {
              "type": "string",
              "description": "The mobile number of the user",
              "example": "+1234567890"
            },
            "email": {
              "type": "string",
              "description": "The email of the user",
              "example": "john.doe@example.com"
            },
            "role": {
              "type": "string",
              "description": "The role of the user",
              "enum": [
                "customer",
                "seller",
                "admin",
                "manager",
                "super-admin"
              ],
              "example": "customer"
            },
            "isActive": {
              "type": "boolean",
              "description": "Whether the user is active",
              "example": true
            },
            "isVerified": {
              "type": "boolean",
              "description": "Whether the user's mobile/email is verified",
              "example": true
            },
            "shopName": {
              "type": "string",
              "description": "The name of the seller's shop",
              "example": "John's Electronics"
            },
            "shopDescription": {
              "type": "string",
              "description": "Description of the seller's shop",
              "example": "We sell high-quality electronics at affordable prices"
            },
            "shopAddress": {
              "type": "string",
              "description": "The address of the seller's shop",
              "example": "123 Main St, City, Country"
            },
            "shopLogo": {
              "type": "string",
              "description": "URL to the shop logo",
              "example": "https://example.com/shop-logo.png"
            },
            "averageRating": {
              "type": "number",
              "description": "Average rating of the seller",
              "example": 4.5
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the user was created"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of when the user was last updated"
            }
          }
        },
        "UserResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "60d0fe4f5311236168a109ca"
            },
            "name": {
              "type": "string",
              "example": "John Doe"
            },
            "mobile": {
              "type": "string",
              "example": "+1234567890"
            },
            "email": {
              "type": "string",
              "example": "john.doe@example.com"
            },
            "role": {
              "type": "string",
              "example": "customer"
            },
            "isActive": {
              "type": "boolean",
              "example": true
            },
            "isVerified": {
              "type": "boolean",
              "example": true
            },
            "seller": {
              "type": "object",
              "properties": {
                "shopName": {
                  "type": "string",
                  "example": "John's Electronics"
                },
                "shopDescription": {
                  "type": "string",
                  "example": "We sell high-quality electronics at affordable prices"
                },
                "shopAddress": {
                  "type": "string",
                  "example": "123 Main St, City, Country"
                },
                "shopLogo": {
                  "type": "string",
                  "example": "https://example.com/shop-logo.png"
                },
                "averageRating": {
                  "type": "number",
                  "example": 4.5
                }
              }
            }
          }
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ],
    "paths": {
      "/addresses": {
        "get": {
          "summary": "Get all user addresses",
          "description": "Retrieve all addresses for the authenticated user",
          "tags": [
            "Addresses"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "List of user addresses",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Address"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "post": {
          "summary": "Create a new address",
          "description": "Add a new address for the authenticated user",
          "tags": [
            "Addresses"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "addressLine1",
                    "city",
                    "state",
                    "postalCode",
                    "country",
                    "phone"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "addressLine1": {
                      "type": "string",
                      "example": "123 Main Street"
                    },
                    "addressLine2": {
                      "type": "string",
                      "example": "Apt 4B"
                    },
                    "city": {
                      "type": "string",
                      "example": "New York"
                    },
                    "state": {
                      "type": "string",
                      "example": "NY"
                    },
                    "postalCode": {
                      "type": "string",
                      "example": 10001
                    },
                    "country": {
                      "type": "string",
                      "example": "United States"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+1 212-555-1234"
                    },
                    "isDefault": {
                      "type": "boolean",
                      "example": false,
                      "description": "Set as default address"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "home",
                        "work",
                        "other"
                      ],
                      "example": "home"
                    },
                    "landmark": {
                      "type": "string",
                      "example": "Near Central Park"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Address created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Address created successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Address"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid address data"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addresses/{id}": {
        "get": {
          "summary": "Get address by ID",
          "description": "Retrieve a specific address by its ID. User can only access their own addresses.",
          "tags": [
            "Addresses"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the address to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Address details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Address"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Not authorized to access this address"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "put": {
          "summary": "Update address",
          "description": "Update an existing address. User can only update their own addresses.",
          "tags": [
            "Addresses"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the address to update"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "addressLine1": {
                      "type": "string",
                      "example": "123 Main Street"
                    },
                    "addressLine2": {
                      "type": "string",
                      "example": "Apt 4B"
                    },
                    "city": {
                      "type": "string",
                      "example": "New York"
                    },
                    "state": {
                      "type": "string",
                      "example": "NY"
                    },
                    "postalCode": {
                      "type": "string",
                      "example": 10001
                    },
                    "country": {
                      "type": "string",
                      "example": "United States"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+1 212-555-1234"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "home",
                        "work",
                        "other"
                      ],
                      "example": "home"
                    },
                    "landmark": {
                      "type": "string",
                      "example": "Near Central Park"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Address updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Address updated successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Address"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid address data"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Not authorized to update this address"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Delete address",
          "description": "Delete an existing address. User can only delete their own addresses. Default address cannot be deleted without first setting another address as default.",
          "tags": [
            "Addresses"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the address to delete"
            }
          ],
          "responses": {
            "200": {
              "description": "Address deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Address deleted successfully"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Cannot delete default address"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Not authorized to delete this address"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addresses/{id}/set-default": {
        "patch": {
          "summary": "Set address as default",
          "description": "Set an address as the default shipping address. User can only set their own addresses as default.",
          "tags": [
            "Addresses"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the address to set as default"
            }
          ],
          "responses": {
            "200": {
              "description": "Address set as default successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Address set as default successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Address"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Not authorized to modify this address"
            },
            "404": {
              "description": "Address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/addresses/default": {
        "get": {
          "summary": "Get default address",
          "description": "Retrieve the user's default address",
          "tags": [
            "Addresses"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "User's default address",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Address"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "404": {
              "description": "Default address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/auth/register": {
        "post": {
          "summary": "Register a new user",
          "tags": [
            "Authentication"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "mobile",
                    "role"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "John Doe"
                    },
                    "mobile": {
                      "type": "string",
                      "example": "+1234567890"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "john.doe@example.com"
                    },
                    "password": {
                      "type": "string",
                      "format": "password",
                      "minLength": 6,
                      "example": "password123"
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "customer",
                        "seller"
                      ],
                      "example": "customer"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "User registered successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "User registered successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/UserResponse"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid input data"
            },
            "409": {
              "description": "Conflict - User already exists"
            }
          }
        }
      },
      "/auth/login": {
        "post": {
          "summary": "Authenticate user and get token",
          "tags": [
            "Authentication"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "mobile",
                    "password"
                  ],
                  "properties": {
                    "mobile": {
                      "type": "string",
                      "example": "+1234567890"
                    },
                    "password": {
                      "type": "string",
                      "format": "password",
                      "example": "password123"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "User authenticated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Login successful"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "user": {
                            "$ref": "#/components/schemas/UserResponse"
                          },
                          "token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid credentials"
            },
            "401": {
              "description": "Unauthorized - Invalid credentials"
            },
            "404": {
              "description": "Not found - User does not exist"
            }
          }
        }
      },
      "/auth/send-otp": {
        "post": {
          "summary": "Send OTP to mobile number for authentication",
          "tags": [
            "Authentication"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "mobile"
                  ],
                  "properties": {
                    "mobile": {
                      "type": "string",
                      "example": "+1234567890"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OTP sent successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "OTP sent successfully"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid mobile number"
            },
            "404": {
              "description": "Not found - User does not exist"
            },
            "500": {
              "description": "Internal server error - Could not send OTP"
            }
          }
        }
      },
      "/auth/verify-otp": {
        "post": {
          "summary": "Verify OTP and login user",
          "tags": [
            "Authentication"
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "mobile",
                    "otp"
                  ],
                  "properties": {
                    "mobile": {
                      "type": "string",
                      "example": "+1234567890"
                    },
                    "otp": {
                      "type": "string",
                      "example": "123456"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OTP verified and user logged in",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "OTP verified successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "user": {
                            "$ref": "#/components/schemas/UserResponse"
                          },
                          "token": {
                            "type": "string",
                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid OTP"
            },
            "401": {
              "description": "Unauthorized - OTP expired or invalid"
            },
            "404": {
              "description": "Not found - User does not exist"
            }
          }
        }
      },
      "/auth/me": {
        "get": {
          "summary": "Get current user profile",
          "tags": [
            "Authentication"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "User profile retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "$ref": "#/components/schemas/UserResponse"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid or missing token"
            },
            "404": {
              "description": "Not found - User does not exist"
            }
          }
        }
      },
      "/auth/logout": {
        "post": {
          "summary": "Logout current user",
          "tags": [
            "Authentication"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "User logged out successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Logged out successfully"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Invalid or missing token"
            }
          }
        }
      },
      "/cart": {
        "get": {
          "summary": "Get user's cart",
          "description": "Retrieve the current user's shopping cart with all items",
          "tags": [
            "Cart"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Cart retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "cart": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "60d0fe4f5311236168a109cb"
                              },
                              "user": {
                                "type": "string",
                                "example": "60d0fe4f5311236168a109cc"
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "_id": {
                                      "type": "string",
                                      "example": "60d0fe4f5311236168a109cd"
                                    },
                                    "product": {
                                      "type": "object",
                                      "properties": {
                                        "_id": {
                                          "type": "string",
                                          "example": "60d0fe4f5311236168a109ce"
                                        },
                                        "name": {
                                          "type": "string",
                                          "example": "Smartphone X1"
                                        },
                                        "price": {
                                          "type": "number",
                                          "example": 799.99
                                        },
                                        "discountPrice": {
                                          "type": "number",
                                          "example": 749.99
                                        },
                                        "images": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "example": [
                                            "image1.jpg"
                                          ]
                                        },
                                        "stock": {
                                          "type": "number",
                                          "example": 25
                                        },
                                        "seller": {
                                          "type": "string",
                                          "example": "60d0fe4f5311236168a109cf"
                                        },
                                        "active": {
                                          "type": "boolean",
                                          "example": true
                                        }
                                      }
                                    },
                                    "quantity": {
                                      "type": "number",
                                      "example": 2
                                    },
                                    "addedAt": {
                                      "type": "string",
                                      "format": "date-time"
                                    }
                                  }
                                }
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          },
                          "total": {
                            "type": "number",
                            "example": 1499.98
                          },
                          "itemCount": {
                            "type": "number",
                            "example": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can access cart"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "post": {
          "summary": "Add item to cart",
          "description": "Add a product to the user's shopping cart",
          "tags": [
            "Cart"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "productId"
                  ],
                  "properties": {
                    "productId": {
                      "type": "string",
                      "description": "ID of the product to add to cart",
                      "example": "60d0fe4f5311236168a109ce"
                    },
                    "quantity": {
                      "type": "number",
                      "description": "Quantity to add (defaults to 1 if not provided)",
                      "minimum": 1,
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Item added to cart successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Item added to cart successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "cart": {
                            "$ref": "#/components/schemas/Cart"
                          },
                          "total": {
                            "type": "number",
                            "example": 1499.98
                          },
                          "itemCount": {
                            "type": "number",
                            "example": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid product ID, product not active, or insufficient stock"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can modify cart"
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Clear cart",
          "description": "Remove all items from the shopping cart",
          "tags": [
            "Cart"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Cart cleared successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Cart cleared successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "cart": {
                            "$ref": "#/components/schemas/Cart"
                          },
                          "total": {
                            "type": "number",
                            "example": 0
                          },
                          "itemCount": {
                            "type": "number",
                            "example": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can modify cart"
            },
            "404": {
              "description": "Cart not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/cart/{productId}": {
        "patch": {
          "summary": "Update cart item quantity",
          "description": "Update the quantity of a specific product in the cart",
          "tags": [
            "Cart"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "productId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the product in cart to update"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "quantity"
                  ],
                  "properties": {
                    "quantity": {
                      "type": "number",
                      "description": "New quantity for the product",
                      "minimum": 1,
                      "example": 3
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Cart item updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Cart item updated successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "cart": {
                            "$ref": "#/components/schemas/Cart"
                          },
                          "total": {
                            "type": "number",
                            "example": 2249.97
                          },
                          "itemCount": {
                            "type": "number",
                            "example": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid quantity or insufficient stock"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can modify cart"
            },
            "404": {
              "description": "Cart not found or product not found in cart"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Remove item from cart",
          "description": "Remove a specific product from the shopping cart",
          "tags": [
            "Cart"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "productId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the product to remove from cart"
            }
          ],
          "responses": {
            "200": {
              "description": "Item removed from cart successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Item removed from cart successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "cart": {
                            "$ref": "#/components/schemas/Cart"
                          },
                          "total": {
                            "type": "number",
                            "example": 749.99
                          },
                          "itemCount": {
                            "type": "number",
                            "example": 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can modify cart"
            },
            "404": {
              "description": "Cart not found or product not found in cart"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/cart/count": {
        "get": {
          "summary": "Get cart count",
          "description": "Get the total number of items in the cart",
          "tags": [
            "Cart"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Cart count retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "count": {
                            "type": "number",
                            "example": 3
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can access cart"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/categories": {
        "get": {
          "summary": "Get all categories",
          "description": "Retrieve a list of all product categories. Can filter by active status and parent category.",
          "tags": [
            "Categories"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "active",
              "schema": {
                "type": "boolean"
              },
              "description": "Filter categories by active status"
            },
            {
              "in": "query",
              "name": "parentId",
              "schema": {
                "type": "string"
              },
              "description": "Filter categories by parent category ID (null for top-level categories)"
            },
            {
              "in": "query",
              "name": "level",
              "schema": {
                "type": "number"
              },
              "description": "Filter categories by level (1 for main, 2 for subcategory, etc.)"
            },
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "description": "Page number for pagination"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 10
              },
              "description": "Number of items per page"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of categories",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "categories": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Category"
                            }
                          },
                          "pagination": {
                            "type": "object",
                            "properties": {
                              "total": {
                                "type": "integer",
                                "example": 42
                              },
                              "page": {
                                "type": "integer",
                                "example": 1
                              },
                              "pages": {
                                "type": "integer",
                                "example": 5
                              },
                              "limit": {
                                "type": "integer",
                                "example": 10
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "post": {
          "summary": "Create a new category",
          "description": "Create a new product category. Requires admin or management access.",
          "tags": [
            "Categories"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Electronics"
                    },
                    "description": {
                      "type": "string",
                      "example": "Electronic gadgets and devices"
                    },
                    "image": {
                      "type": "string",
                      "example": "https://example.com/category-image.jpg"
                    },
                    "parentCategory": {
                      "type": "string",
                      "example": null
                    },
                    "isActive": {
                      "type": "boolean",
                      "default": true,
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Category created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Category created successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input data"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Insufficient permissions"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/categories/{id}": {
        "get": {
          "summary": "Get category by ID",
          "description": "Retrieve detailed information about a specific category by its ID",
          "tags": [
            "Categories"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the category to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Detailed category information",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Category not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "put": {
          "summary": "Update a category",
          "description": "Update an existing category. Requires admin or management access.",
          "tags": [
            "Categories"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the category to update"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Updated Electronics"
                    },
                    "description": {
                      "type": "string",
                      "example": "Updated description for electronic gadgets"
                    },
                    "image": {
                      "type": "string",
                      "example": "https://example.com/updated-image.jpg"
                    },
                    "isActive": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Category updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Category updated successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Category"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input data"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Insufficient permissions"
            },
            "404": {
              "description": "Category not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/categories/{id}/subcategories": {
        "get": {
          "summary": "Get subcategories of a category",
          "description": "Retrieve all subcategories belonging to a specific category",
          "tags": [
            "Categories"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the parent category"
            }
          ],
          "responses": {
            "200": {
              "description": "List of subcategories",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Category"
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Parent category not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/categories/{id}/product-count": {
        "get": {
          "summary": "Count products in category",
          "description": "Get the number of products in a specific category and its subcategories",
          "tags": [
            "Categories"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the category"
            }
          ],
          "responses": {
            "200": {
              "description": "Product count in the category and subcategories",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "categoryId": {
                            "type": "string",
                            "example": "60d0fe4f5311236168a109ca"
                          },
                          "categoryName": {
                            "type": "string",
                            "example": "Electronics"
                          },
                          "productCount": {
                            "type": "integer",
                            "example": 42
                          },
                          "includesSubcategories": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Category not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/categories/{id}/toggle-status": {
        "patch": {
          "summary": "Toggle category active status",
          "description": "Activate or deactivate a category. Requires admin or management access.",
          "tags": [
            "Categories"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the category to toggle status"
            }
          ],
          "responses": {
            "200": {
              "description": "Category status toggled successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Category is now active"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "60d0fe4f5311236168a109ca"
                          },
                          "name": {
                            "type": "string",
                            "example": "Electronics"
                          },
                          "isActive": {
                            "type": "boolean",
                            "example": true
                          },
                          "affectedProducts": {
                            "type": "integer",
                            "example": 15
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Insufficient permissions"
            },
            "404": {
              "description": "Category not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/checkout": {
        "get": {
          "summary": "Get checkout information",
          "description": "Retrieves all necessary information for checkout including cart items, shipping addresses, and payment methods",
          "tags": [
            "Checkout"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Checkout information retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Checkout information retrieved successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "cart": {
                            "$ref": "#/components/schemas/Cart"
                          },
                          "summary": {
                            "type": "object",
                            "properties": {
                              "itemsPrice": {
                                "type": "number",
                                "example": 1299.99
                              },
                              "taxPrice": {
                                "type": "number",
                                "example": 233.99
                              },
                              "shippingPrice": {
                                "type": "number",
                                "example": 0
                              },
                              "totalPrice": {
                                "type": "number",
                                "example": 1533.98
                              }
                            }
                          },
                          "addresses": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Address"
                            }
                          },
                          "defaultAddress": {
                            "type": "object",
                            "nullable": true,
                            "$ref": "#/components/schemas/Address"
                          },
                          "paymentMethods": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "cod"
                                },
                                "name": {
                                  "type": "string",
                                  "example": "Cash on Delivery"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Pay when you receive the order"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (e.g., empty cart)"
            },
            "401": {
              "description": "Not authorized"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "post": {
          "summary": "Process checkout",
          "description": "Processes the checkout and creates an order",
          "tags": [
            "Checkout"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "shippingAddressId",
                    "paymentMethod"
                  ],
                  "properties": {
                    "shippingAddressId": {
                      "type": "string",
                      "example": "60d0fe4f5311236168a109ca"
                    },
                    "paymentMethod": {
                      "type": "string",
                      "enum": [
                        "cod",
                        "card",
                        "wallet",
                        "upi",
                        "netbanking"
                      ],
                      "example": "card"
                    },
                    "couponCode": {
                      "type": "string",
                      "example": "WELCOME10"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Order created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Order placed successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "order": {
                            "$ref": "#/components/schemas/Order"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (e.g., empty cart, out of stock items)"
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Shipping address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/checkout/apply-coupon": {
        "post": {
          "summary": "Apply coupon to checkout",
          "description": "Applies a coupon code to get discounts on checkout",
          "tags": [
            "Checkout"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "couponCode"
                  ],
                  "properties": {
                    "couponCode": {
                      "type": "string",
                      "example": "WELCOME10"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Coupon applied successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Coupon applied successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "couponCode": {
                            "type": "string",
                            "example": "WELCOME10"
                          },
                          "discount": {
                            "type": "number",
                            "example": 129.99
                          },
                          "summary": {
                            "type": "object",
                            "properties": {
                              "originalItemsPrice": {
                                "type": "number",
                                "example": 1299.99
                              },
                              "discountedItemsPrice": {
                                "type": "number",
                                "example": 1170
                              },
                              "taxPrice": {
                                "type": "number",
                                "example": 210.6
                              },
                              "shippingPrice": {
                                "type": "number",
                                "example": 0
                              },
                              "totalPrice": {
                                "type": "number",
                                "example": 1380.6
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (e.g., invalid coupon, minimum order value not met)"
            },
            "401": {
              "description": "Not authorized"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/checkout/shipping-options": {
        "get": {
          "summary": "Get shipping options",
          "description": "Retrieves available shipping options for checkout",
          "tags": [
            "Checkout"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Shipping options retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Shipping options retrieved successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "shippingOptions": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "standard"
                                },
                                "name": {
                                  "type": "string",
                                  "example": "Standard Shipping"
                                },
                                "price": {
                                  "type": "number",
                                  "example": 0
                                },
                                "estimatedDays": {
                                  "type": "string",
                                  "example": "3-5"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Free shipping on orders over ₹500"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request (e.g., empty cart)"
            },
            "401": {
              "description": "Not authorized"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/checkout/payment-methods": {
        "get": {
          "summary": "Get payment methods",
          "description": "Retrieves available payment methods for checkout",
          "tags": [
            "Checkout"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Payment methods retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Payment methods retrieved successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "paymentMethods": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "cod"
                                },
                                "name": {
                                  "type": "string",
                                  "example": "Cash on Delivery"
                                },
                                "description": {
                                  "type": "string",
                                  "example": "Pay when you receive the order"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/coupons": {
        "get": {
          "summary": "Get all coupons",
          "description": "Retrieve all coupons with optional filtering. Available only to admin users.",
          "tags": [
            "Coupons"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "integer",
                "minimum": 1
              },
              "description": "Page number for pagination (default is 1)"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "minimum": 1
              },
              "description": "Number of items per page (default is 10)"
            },
            {
              "in": "query",
              "name": "active",
              "schema": {
                "type": "boolean"
              },
              "description": "Filter by active status"
            },
            {
              "in": "query",
              "name": "valid",
              "schema": {
                "type": "boolean"
              },
              "description": "Filter by validity (true returns only currently valid coupons)"
            },
            {
              "in": "query",
              "name": "code",
              "schema": {
                "type": "string"
              },
              "description": "Search by coupon code"
            }
          ],
          "responses": {
            "200": {
              "description": "List of coupons retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Coupons retrieved successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "coupons": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Coupon"
                            }
                          },
                          "pagination": {
                            "type": "object",
                            "properties": {
                              "total": {
                                "type": "integer",
                                "example": 47
                              },
                              "page": {
                                "type": "integer",
                                "example": 1
                              },
                              "pages": {
                                "type": "integer",
                                "example": 5
                              },
                              "limit": {
                                "type": "integer",
                                "example": 10
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "Forbidden - User is not an admin"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "post": {
          "summary": "Create a new coupon",
          "description": "Create a new discount coupon. Available only to admin users.",
          "tags": [
            "Coupons"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "discountType",
                    "discountValue",
                    "startDate",
                    "endDate"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Unique coupon code",
                      "example": "SUMMER20"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the coupon",
                      "example": "20% off on all summer products"
                    },
                    "discountType": {
                      "type": "string",
                      "enum": [
                        "percentage",
                        "fixed"
                      ],
                      "description": "Type of discount (percentage or fixed amount)",
                      "example": "percentage"
                    },
                    "discountValue": {
                      "type": "number",
                      "description": "Value of the discount (percentage or fixed amount)",
                      "example": 20
                    },
                    "minOrderValue": {
                      "type": "number",
                      "description": "Minimum order value required to apply this coupon",
                      "example": 1000
                    },
                    "maxDiscountValue": {
                      "type": "number",
                      "description": "Maximum discount amount that can be applied (for percentage discounts)",
                      "example": 500
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Start date when the coupon becomes valid",
                      "example": "2025-04-01T00:00:00.000Z"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "End date when the coupon expires",
                      "example": "2025-04-30T23:59:59.000Z"
                    },
                    "usageLimit": {
                      "type": "number",
                      "description": "Maximum number of times the coupon can be used",
                      "example": 100
                    },
                    "isActive": {
                      "type": "boolean",
                      "description": "Whether the coupon is currently active",
                      "default": true,
                      "example": true
                    },
                    "applicableProducts": {
                      "type": "array",
                      "description": "List of product IDs this coupon is applicable to (empty means all products)",
                      "items": {
                        "type": "string"
                      },
                      "example": []
                    },
                    "applicableCategories": {
                      "type": "array",
                      "description": "List of category IDs this coupon is applicable to (empty means all categories)",
                      "items": {
                        "type": "string"
                      },
                      "example": []
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Coupon created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Coupon created successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "coupon": {
                            "$ref": "#/components/schemas/Coupon"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Validation error or coupon with code already exists"
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "Forbidden - User is not an admin"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/coupons/valid": {
        "get": {
          "summary": "Get valid coupons for customer",
          "description": "Retrieve all currently valid coupons that customers can use.",
          "tags": [
            "Coupons"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Valid coupons retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Valid coupons retrieved successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "coupons": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string",
                                  "example": "60d0fe4f5311236168a109cd"
                                },
                                "code": {
                                  "type": "string",
                                  "example": "SUMMER20"
                                },
                                "discountType": {
                                  "type": "string",
                                  "enum": [
                                    "percentage",
                                    "fixed"
                                  ],
                                  "example": "percentage"
                                },
                                "discountValue": {
                                  "type": "number",
                                  "example": 20
                                },
                                "minOrderValue": {
                                  "type": "number",
                                  "example": 1000
                                },
                                "description": {
                                  "type": "string",
                                  "example": "20% off on all summer products"
                                },
                                "discountMessage": {
                                  "type": "string",
                                  "example": "20% off on orders above 1000"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/coupons/validate": {
        "post": {
          "summary": "Validate a coupon",
          "description": "Check if a coupon is valid and applicable to the current order.",
          "tags": [
            "Coupons"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "code",
                    "orderAmount"
                  ],
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Coupon code to validate",
                      "example": "SUMMER20"
                    },
                    "orderAmount": {
                      "type": "number",
                      "description": "Total order amount before discount",
                      "example": 1500
                    },
                    "products": {
                      "type": "array",
                      "description": "Optional list of product IDs in the cart for validating product-specific coupons",
                      "items": {
                        "type": "object",
                        "properties": {
                          "productId": {
                            "type": "string",
                            "example": "60d0fe4f5311236168a109cd"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Coupon is valid",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Coupon is valid"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "coupon": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string",
                                "example": "SUMMER20"
                              },
                              "discountType": {
                                "type": "string",
                                "enum": [
                                  "percentage",
                                  "fixed"
                                ],
                                "example": "percentage"
                              },
                              "discountValue": {
                                "type": "number",
                                "example": 20
                              },
                              "discountAmount": {
                                "type": "number",
                                "example": 300
                              },
                              "discountMessage": {
                                "type": "string",
                                "example": "20% off on orders above 1000"
                              },
                              "minOrderValue": {
                                "type": "number",
                                "example": 1000
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid coupon or cannot be applied to the current order"
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Coupon not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/coupons/apply": {
        "post": {
          "summary": "Apply coupon to cart",
          "description": "Apply a coupon code to the cart and calculate the discounted total",
          "tags": [
            "Coupons"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "couponCode",
                    "cartTotal"
                  ],
                  "properties": {
                    "couponCode": {
                      "type": "string",
                      "description": "Coupon code to apply",
                      "example": "SUMMER20"
                    },
                    "cartTotal": {
                      "type": "number",
                      "description": "Total cart amount before discount",
                      "example": 1500
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Coupon applied successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Coupon applied successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "couponCode": {
                            "type": "string",
                            "example": "SUMMER20"
                          },
                          "discount": {
                            "type": "number",
                            "example": 300
                          },
                          "summary": {
                            "type": "object",
                            "properties": {
                              "originalItemsPrice": {
                                "type": "number",
                                "example": 1500
                              },
                              "discountedItemsPrice": {
                                "type": "number",
                                "example": 1200
                              },
                              "taxPrice": {
                                "type": "number",
                                "example": 216
                              },
                              "totalPrice": {
                                "type": "number",
                                "example": 1416
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid coupon or cannot be applied to the current cart"
            },
            "401": {
              "description": "Not authorized"
            },
            "404": {
              "description": "Coupon not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/coupons/{id}": {
        "get": {
          "summary": "Get coupon by ID",
          "description": "Retrieve coupon details by ID. Available only to admin users.",
          "tags": [
            "Coupons"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Coupon ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Coupon retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Coupon retrieved successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "coupon": {
                            "$ref": "#/components/schemas/Coupon"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "Forbidden - User is not an admin"
            },
            "404": {
              "description": "Coupon not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "put": {
          "summary": "Update a coupon",
          "description": "Update an existing coupon's details. Available only to admin users.",
          "tags": [
            "Coupons"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Coupon ID"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Unique coupon code",
                      "example": "SUMMER25"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the coupon",
                      "example": "25% off on all summer products"
                    },
                    "discountType": {
                      "type": "string",
                      "enum": [
                        "percentage",
                        "fixed"
                      ],
                      "description": "Type of discount (percentage or fixed amount)",
                      "example": "percentage"
                    },
                    "discountValue": {
                      "type": "number",
                      "description": "Value of the discount (percentage or fixed amount)",
                      "example": 25
                    },
                    "minOrderValue": {
                      "type": "number",
                      "description": "Minimum order value required to apply this coupon",
                      "example": 800
                    },
                    "maxDiscountValue": {
                      "type": "number",
                      "description": "Maximum discount amount that can be applied (for percentage discounts)",
                      "example": 600
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Start date when the coupon becomes valid",
                      "example": "2025-04-01T00:00:00.000Z"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date-time",
                      "description": "End date when the coupon expires",
                      "example": "2025-05-31T23:59:59.000Z"
                    },
                    "usageLimit": {
                      "type": "number",
                      "description": "Maximum number of times the coupon can be used",
                      "example": 200
                    },
                    "isActive": {
                      "type": "boolean",
                      "description": "Whether the coupon is currently active",
                      "example": true
                    },
                    "applicableProducts": {
                      "type": "array",
                      "description": "List of product IDs this coupon is applicable to (empty means all products)",
                      "items": {
                        "type": "string"
                      },
                      "example": []
                    },
                    "applicableCategories": {
                      "type": "array",
                      "description": "List of category IDs this coupon is applicable to (empty means all categories)",
                      "items": {
                        "type": "string"
                      },
                      "example": []
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Coupon updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Coupon updated successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "coupon": {
                            "$ref": "#/components/schemas/Coupon"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Validation error or coupon with code already exists"
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "Forbidden - User is not an admin"
            },
            "404": {
              "description": "Coupon not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Delete a coupon",
          "description": "Delete an existing coupon. Available only to admin users.",
          "tags": [
            "Coupons"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              },
              "description": "Coupon ID"
            }
          ],
          "responses": {
            "200": {
              "description": "Coupon deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Coupon deleted successfully"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Not authorized"
            },
            "403": {
              "description": "Forbidden - User is not an admin"
            },
            "404": {
              "description": "Coupon not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/orders": {
        "post": {
          "summary": "Create a new order",
          "description": "Create a new order. Only customers can create orders.",
          "tags": [
            "Orders"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items",
                    "shippingAddress",
                    "paymentMethod"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "description": "List of products in the order",
                      "items": {
                        "type": "object",
                        "required": [
                          "product",
                          "quantity"
                        ],
                        "properties": {
                          "product": {
                            "type": "string",
                            "description": "Product ID",
                            "example": "60d0fe4f5311236168a109cc"
                          },
                          "quantity": {
                            "type": "number",
                            "description": "Quantity of the product",
                            "example": 2
                          }
                        }
                      }
                    },
                    "shippingAddress": {
                      "type": "string",
                      "description": "ID of the shipping address",
                      "example": "60d0fe4f5311236168a109cd"
                    },
                    "paymentMethod": {
                      "type": "string",
                      "description": "Method of payment",
                      "enum": [
                        "cod",
                        "card",
                        "wallet",
                        "upi",
                        "netbanking"
                      ],
                      "example": "card"
                    },
                    "couponCode": {
                      "type": "string",
                      "description": "Coupon code for discount (optional)",
                      "example": "SUMMER20"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Order created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Order placed successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid input data or insufficient stock"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can place orders"
            },
            "404": {
              "description": "Not found - Product or address not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "get": {
          "summary": "Get all orders",
          "description": "Retrieve a list of orders with filtering and pagination. Access is role-based - customers see their own orders, sellers see orders containing their products, admins/managers see all orders.",
          "tags": [
            "Orders"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "query",
              "name": "status",
              "schema": {
                "type": "string",
                "enum": [
                  "pending",
                  "processing",
                  "shipped",
                  "delivered",
                  "cancelled",
                  "returned",
                  "refunded"
                ]
              },
              "description": "Filter orders by status"
            },
            {
              "in": "query",
              "name": "fromDate",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter orders created on or after this date (YYYY-MM-DD)"
            },
            {
              "in": "query",
              "name": "toDate",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter orders created on or before this date (YYYY-MM-DD)"
            },
            {
              "in": "query",
              "name": "minAmount",
              "schema": {
                "type": "number"
              },
              "description": "Minimum order amount"
            },
            {
              "in": "query",
              "name": "maxAmount",
              "schema": {
                "type": "number"
              },
              "description": "Maximum order amount"
            },
            {
              "in": "query",
              "name": "paymentMethod",
              "schema": {
                "type": "string",
                "enum": [
                  "cod",
                  "card",
                  "wallet",
                  "upi",
                  "netbanking"
                ]
              },
              "description": "Filter by payment method"
            },
            {
              "in": "query",
              "name": "isPaid",
              "schema": {
                "type": "boolean"
              },
              "description": "Filter by payment status"
            },
            {
              "in": "query",
              "name": "isDelivered",
              "schema": {
                "type": "boolean"
              },
              "description": "Filter by delivery status"
            },
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "description": "Page number for pagination"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 10
              },
              "description": "Number of items per page"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of orders",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "orders": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Order"
                            }
                          },
                          "pagination": {
                            "type": "object",
                            "properties": {
                              "total": {
                                "type": "integer",
                                "example": 42
                              },
                              "page": {
                                "type": "integer",
                                "example": 1
                              },
                              "pages": {
                                "type": "integer",
                                "example": 5
                              },
                              "limit": {
                                "type": "integer",
                                "example": 10
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/orders/{id}": {
        "get": {
          "summary": "Get order by ID",
          "description": "Retrieve detailed information about a specific order by its ID. Access is role-based - customers can only see their own orders, sellers can see orders containing their products, admins/managers can see all orders.",
          "tags": [
            "Orders"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the order to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Detailed order information",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Insufficient permissions to access this order"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/orders/{id}/status": {
        "patch": {
          "summary": "Update order status",
          "description": "Update the status of an order. Only sellers, admins, and managers can update order status.",
          "tags": [
            "Orders"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the order to update"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "pending",
                        "processing",
                        "shipped",
                        "delivered",
                        "cancelled",
                        "returned",
                        "refunded"
                      ],
                      "example": "shipped"
                    },
                    "comment": {
                      "type": "string",
                      "example": "Order shipped via FedEx"
                    },
                    "trackingInfo": {
                      "type": "object",
                      "properties": {
                        "courier": {
                          "type": "string",
                          "example": "FedEx"
                        },
                        "trackingNumber": {
                          "type": "string",
                          "example": "FX123456789"
                        },
                        "trackingUrl": {
                          "type": "string",
                          "example": "https://fedex.com/tracking/FX123456789"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order status updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Order status updated successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid status transition"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Insufficient permissions"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/orders/{id}/cancel": {
        "post": {
          "summary": "Cancel an order",
          "description": "Cancel a pending or processing order. Customers can cancel their own orders, while sellers/admins can cancel any eligible order.",
          "tags": [
            "Orders"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the order to cancel"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "reason"
                  ],
                  "properties": {
                    "reason": {
                      "type": "string",
                      "example": "Changed my mind about the purchase"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Order cancelled successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Order cancelled successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Order cannot be cancelled (e.g., already shipped)"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Not authorized to cancel this order"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/orders/{id}/return": {
        "post": {
          "summary": "Request order return",
          "description": "Request a return for a delivered order. Only customers can request returns for their own orders.",
          "tags": [
            "Orders"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the order to return"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "reason",
                    "items"
                  ],
                  "properties": {
                    "reason": {
                      "type": "string",
                      "example": "Product damaged during shipping"
                    },
                    "items": {
                      "type": "array",
                      "description": "List of order items to return",
                      "items": {
                        "type": "object",
                        "required": [
                          "productId",
                          "quantity"
                        ],
                        "properties": {
                          "productId": {
                            "type": "string",
                            "example": "60d0fe4f5311236168a109cc"
                          },
                          "quantity": {
                            "type": "number",
                            "example": 1
                          },
                          "reason": {
                            "type": "string",
                            "example": "Product damaged"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Return request submitted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Return request submitted successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Order cannot be returned (e.g., past return window)"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can request returns"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/orders/statistics/counts": {
        "get": {
          "summary": "Get order counts for dashboard",
          "description": "Get counts of orders in different statuses for dashboard. Access is role-based.",
          "tags": [
            "Orders"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Order counts by status",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "totalOrders": {
                            "type": "number",
                            "example": 120
                          },
                          "pending": {
                            "type": "number",
                            "example": 15
                          },
                          "processing": {
                            "type": "number",
                            "example": 25
                          },
                          "shipped": {
                            "type": "number",
                            "example": 30
                          },
                          "delivered": {
                            "type": "number",
                            "example": 40
                          },
                          "cancelled": {
                            "type": "number",
                            "example": 8
                          },
                          "returned": {
                            "type": "number",
                            "example": 2
                          },
                          "totalRevenue": {
                            "type": "number",
                            "example": 12500.75
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/orders/{id}/invoice": {
        "get": {
          "summary": "Generate order invoice",
          "description": "Generate a PDF invoice for an order. Access is role-based - customers can only generate invoices for their own orders, sellers for orders containing their products, and admins/managers for all orders.",
          "tags": [
            "Orders"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the order to generate invoice for"
            }
          ],
          "responses": {
            "200": {
              "description": "PDF invoice",
              "content": {
                "application/pdf": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Not authorized to access this order"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/orders/latest": {
        "get": {
          "summary": "Get user's latest orders",
          "description": "Get the latest orders for the authenticated user. Access is role-based - customers see their recent orders, sellers see recent orders containing their products, admins/managers see all recent orders.",
          "tags": [
            "Orders"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50,
                "default": 5
              },
              "description": "Number of orders to return"
            }
          ],
          "responses": {
            "200": {
              "description": "Latest orders",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Order"
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/payment/create": {
        "post": {
          "summary": "Create a payment order",
          "description": "Creates a new payment order with Razorpay or initializes Cash on Delivery",
          "tags": [
            "Payments"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "orderId",
                    "paymentMethod"
                  ],
                  "properties": {
                    "orderId": {
                      "type": "string",
                      "description": "ID of the order to be paid",
                      "example": "60d0fe4f5311236168a109ca"
                    },
                    "paymentMethod": {
                      "type": "string",
                      "description": "Method of payment",
                      "enum": [
                        "card",
                        "upi",
                        "netbanking",
                        "wallet",
                        "cod"
                      ],
                      "example": "card"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payment order created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "razorpayOrderId": {
                            "type": "string",
                            "example": "order_JDz0lUodr0lXN3"
                          },
                          "amount": {
                            "type": "number",
                            "example": 1994.98
                          },
                          "currency": {
                            "type": "string",
                            "example": "INR"
                          },
                          "keyId": {
                            "type": "string",
                            "example": "rzp_test_12345"
                          },
                          "prefill": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "example": "John Doe"
                              },
                              "email": {
                                "type": "string",
                                "example": "john@example.com"
                              },
                              "contact": {
                                "type": "string",
                                "example": "9876543210"
                              }
                            }
                          },
                          "orderId": {
                            "type": "string",
                            "example": "60d0fe4f5311236168a109ca"
                          },
                          "orderNumber": {
                            "type": "string",
                            "example": "ORD-210712-1234"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request, missing required fields or invalid payment method"
            },
            "401": {
              "description": "Unauthorized - Not authenticated"
            },
            "403": {
              "description": "Forbidden - Not authorized to access this order"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error during payment processing"
            }
          }
        }
      },
      "/payment/verify": {
        "post": {
          "summary": "Verify payment",
          "description": "Verifies a Razorpay payment and updates the order status",
          "tags": [
            "Payments"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "razorpay_order_id",
                    "razorpay_payment_id",
                    "razorpay_signature",
                    "orderId"
                  ],
                  "properties": {
                    "razorpay_order_id": {
                      "type": "string",
                      "description": "Razorpay order ID",
                      "example": "order_JDz0lUodr0lXN3"
                    },
                    "razorpay_payment_id": {
                      "type": "string",
                      "description": "Razorpay payment ID",
                      "example": "pay_JDz25rqdvEzgMM"
                    },
                    "razorpay_signature": {
                      "type": "string",
                      "description": "Razorpay signature for verification",
                      "example": "17f23c23f21323ac7e840e13e9388d1828d6eba95984a3e61f89ce52a11a9ab0"
                    },
                    "orderId": {
                      "type": "string",
                      "description": "Your application's order ID",
                      "example": "60d0fe4f5311236168a109ca"
                    },
                    "paymentMethod": {
                      "type": "string",
                      "description": "Method of payment used",
                      "enum": [
                        "card",
                        "upi",
                        "netbanking",
                        "wallet"
                      ],
                      "example": "card"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Payment verified successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Payment verified successfully"
                          },
                          "order": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "60d0fe4f5311236168a109ca"
                              },
                              "orderNumber": {
                                "type": "string",
                                "example": "ORD-210712-1234"
                              },
                              "isPaid": {
                                "type": "boolean",
                                "example": true
                              },
                              "status": {
                                "type": "string",
                                "example": "processing"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request, missing required fields or invalid signature"
            },
            "401": {
              "description": "Unauthorized - Not authenticated"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error during payment verification"
            }
          }
        }
      },
      "/payment/key": {
        "get": {
          "summary": "Get Razorpay key ID",
          "description": "Retrieves the Razorpay public key (key_id) for frontend integration",
          "tags": [
            "Payments"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Successfully retrieved Razorpay key",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "rzp_test_12345"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Not authenticated"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/payment/cod/confirm": {
        "post": {
          "summary": "Confirm COD order",
          "description": "Updates the status of a Cash on Delivery order to processing",
          "tags": [
            "Payments"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "orderId"
                  ],
                  "properties": {
                    "orderId": {
                      "type": "string",
                      "description": "ID of the COD order to confirm",
                      "example": "60d0fe4f5311236168a109ca"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "COD order confirmed successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "message": {
                            "type": "string",
                            "example": "Cash on Delivery order confirmed successfully"
                          },
                          "order": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "60d0fe4f5311236168a109ca"
                              },
                              "orderNumber": {
                                "type": "string",
                                "example": "ORD-210712-1234"
                              },
                              "status": {
                                "type": "string",
                                "example": "processing"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request, missing order ID or not a COD order"
            },
            "401": {
              "description": "Unauthorized - Not authenticated"
            },
            "403": {
              "description": "Forbidden - Not authorized to access this order"
            },
            "404": {
              "description": "Order not found"
            },
            "500": {
              "description": "Server error during order confirmation"
            }
          }
        }
      },
      "/products": {
        "get": {
          "summary": "Get all products",
          "description": "Retrieve a list of products with filtering, searching, and pagination",
          "tags": [
            "Products"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "name",
              "schema": {
                "type": "string"
              },
              "description": "Filter products by name (partial match)"
            },
            {
              "in": "query",
              "name": "category",
              "schema": {
                "type": "string"
              },
              "description": "Filter products by category ID"
            },
            {
              "in": "query",
              "name": "subcategory",
              "schema": {
                "type": "string"
              },
              "description": "Filter products by subcategory ID"
            },
            {
              "in": "query",
              "name": "seller",
              "schema": {
                "type": "string"
              },
              "description": "Filter products by seller ID"
            },
            {
              "in": "query",
              "name": "minPrice",
              "schema": {
                "type": "number"
              },
              "description": "Minimum price filter"
            },
            {
              "in": "query",
              "name": "maxPrice",
              "schema": {
                "type": "number"
              },
              "description": "Maximum price filter"
            },
            {
              "in": "query",
              "name": "active",
              "schema": {
                "type": "boolean"
              },
              "description": "Filter by active status"
            },
            {
              "in": "query",
              "name": "featured",
              "schema": {
                "type": "boolean"
              },
              "description": "Filter by featured status"
            },
            {
              "in": "query",
              "name": "inStock",
              "schema": {
                "type": "boolean"
              },
              "description": "Filter products by stock availability"
            },
            {
              "in": "query",
              "name": "sortBy",
              "schema": {
                "type": "string",
                "enum": [
                  "name",
                  "price",
                  "createdAt",
                  "averageRating"
                ]
              },
              "description": "Field to sort by"
            },
            {
              "in": "query",
              "name": "sortOrder",
              "schema": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ]
              },
              "description": "Sort order (ascending or descending)"
            },
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "description": "Page number for pagination"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 10
              },
              "description": "Number of items per page"
            }
          ],
          "responses": {
            "200": {
              "description": "A list of products",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "products": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Product"
                            }
                          },
                          "pagination": {
                            "type": "object",
                            "properties": {
                              "total": {
                                "type": "integer",
                                "example": 42
                              },
                              "page": {
                                "type": "integer",
                                "example": 1
                              },
                              "pages": {
                                "type": "integer",
                                "example": 5
                              },
                              "limit": {
                                "type": "integer",
                                "example": 10
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "post": {
          "summary": "Create a new product",
          "description": "Create a new product. Requires seller or admin access.",
          "tags": [
            "Products"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "description",
                    "price",
                    "stock",
                    "category"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Smartphone X1"
                    },
                    "description": {
                      "type": "string",
                      "example": "A high-performance smartphone with a 6.5-inch display and 48MP camera"
                    },
                    "price": {
                      "type": "number",
                      "example": 999.99
                    },
                    "discountPrice": {
                      "type": "number",
                      "example": 899.99
                    },
                    "stock": {
                      "type": "number",
                      "example": 100
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "https://example.com/product-image-1.jpg"
                      }
                    },
                    "category": {
                      "type": "string",
                      "example": "60d0fe4f5311236168a109cb"
                    },
                    "subcategory": {
                      "type": "string",
                      "example": "60d0fe4f5311236168a109cc"
                    },
                    "brand": {
                      "type": "string",
                      "example": "TechBrand"
                    },
                    "isActive": {
                      "type": "boolean",
                      "default": true,
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Product created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Product created successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input data"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Insufficient permissions"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/products/{id}": {
        "get": {
          "summary": "Get product by ID",
          "description": "Retrieve detailed information about a specific product by its ID",
          "tags": [
            "Products"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the product to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Detailed product information",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "put": {
          "summary": "Update a product",
          "description": "Update an existing product. Requires seller or admin access.",
          "tags": [
            "Products"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the product to update"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Updated Smartphone X1"
                    },
                    "description": {
                      "type": "string",
                      "example": "Updated description for the smartphone"
                    },
                    "price": {
                      "type": "number",
                      "example": 899.99
                    },
                    "discountPrice": {
                      "type": "number",
                      "example": 799.99
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "https://example.com/updated-image.jpg"
                      }
                    },
                    "category": {
                      "type": "string",
                      "example": "60d0fe4f5311236168a109cb"
                    },
                    "subcategory": {
                      "type": "string",
                      "example": "60d0fe4f5311236168a109cc"
                    },
                    "brand": {
                      "type": "string",
                      "example": "UpdatedBrand"
                    },
                    "isActive": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Product updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Product updated successfully"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Product"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid input data"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Insufficient permissions or not the product owner"
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Delete a product",
          "description": "Delete an existing product. Requires seller or admin access.",
          "tags": [
            "Products"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the product to delete"
            }
          ],
          "responses": {
            "200": {
              "description": "Product deleted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Product deleted successfully"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Insufficient permissions or not the product owner"
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/products/{id}/toggle-status": {
        "patch": {
          "summary": "Toggle product active status",
          "description": "Activate or deactivate a product. Requires seller or admin access.",
          "tags": [
            "Products"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the product to toggle status"
            }
          ],
          "responses": {
            "200": {
              "description": "Product status toggled successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Product is now active"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "60d0fe4f5311236168a109ca"
                          },
                          "name": {
                            "type": "string",
                            "example": "Smartphone X1"
                          },
                          "isActive": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Insufficient permissions or not the product owner"
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers/profile/{sellerId}": {
        "get": {
          "summary": "Get seller profile",
          "description": "Retrieve public profile information for a specific seller",
          "tags": [
            "Sellers"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "sellerId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the seller"
            }
          ],
          "responses": {
            "200": {
              "description": "Seller profile successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "60d0fe4f5311236168a109ca"
                          },
                          "name": {
                            "type": "string",
                            "example": "Tech Haven"
                          },
                          "logo": {
                            "type": "string",
                            "example": "logo.jpg"
                          },
                          "description": {
                            "type": "string",
                            "example": "A seller of quality tech products"
                          },
                          "rating": {
                            "type": "number",
                            "example": 4.7
                          },
                          "totalReviews": {
                            "type": "number",
                            "example": 128
                          },
                          "joinedAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "productsCount": {
                            "type": "number",
                            "example": 45
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Seller not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers/{sellerId}/reviews": {
        "get": {
          "summary": "Get seller reviews",
          "description": "Retrieve reviews for a specific seller",
          "tags": [
            "Sellers"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "sellerId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the seller"
            },
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "description": "Page number"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50,
                "default": 10
              },
              "description": "Number of reviews per page"
            },
            {
              "in": "query",
              "name": "rating",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 5
              },
              "description": "Filter by rating (1-5)"
            }
          ],
          "responses": {
            "200": {
              "description": "Seller reviews successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "reviews": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string",
                                  "example": "60d0fe4f5311236168a109cb"
                                },
                                "user": {
                                  "type": "object",
                                  "properties": {
                                    "_id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "avatar": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "rating": {
                                  "type": "number",
                                  "example": 4
                                },
                                "comment": {
                                  "type": "string",
                                  "example": "Great seller, fast shipping"
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            }
                          },
                          "pagination": {
                            "type": "object",
                            "properties": {
                              "total": {
                                "type": "integer",
                                "example": 28
                              },
                              "pages": {
                                "type": "integer",
                                "example": 3
                              },
                              "page": {
                                "type": "integer",
                                "example": 1
                              },
                              "limit": {
                                "type": "integer",
                                "example": 10
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Seller not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "post": {
          "summary": "Add seller review",
          "description": "Add a review for a specific seller. Only customers can add reviews, and they must have completed at least one order with the seller.",
          "tags": [
            "Sellers"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "sellerId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the seller to review"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "rating"
                  ],
                  "properties": {
                    "rating": {
                      "type": "number",
                      "minimum": 1,
                      "maximum": 5,
                      "example": 4,
                      "description": "Rating from 1 to 5 stars"
                    },
                    "comment": {
                      "type": "string",
                      "example": "Great seller with fast shipping and excellent products"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Review added successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Review added successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "60d0fe4f5311236168a109cb"
                          },
                          "rating": {
                            "type": "number",
                            "example": 4
                          },
                          "comment": {
                            "type": "string",
                            "example": "Great seller with fast shipping"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid rating or already reviewed"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers who have completed an order can review"
            },
            "404": {
              "description": "Seller not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers/apply": {
        "post": {
          "summary": "Apply to become a seller",
          "description": "Submit an application to become a seller on the platform. Only customers can apply.",
          "tags": [
            "Sellers"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "businessName",
                    "businessEmail",
                    "businessPhone",
                    "businessAddress",
                    "taxId"
                  ],
                  "properties": {
                    "businessName": {
                      "type": "string",
                      "example": "Tech Haven"
                    },
                    "businessEmail": {
                      "type": "string",
                      "format": "email",
                      "example": "contact@techhaven.com"
                    },
                    "businessPhone": {
                      "type": "string",
                      "example": "+1 212-555-1234"
                    },
                    "businessAddress": {
                      "type": "string",
                      "example": "123 Business St, New York, NY 10001"
                    },
                    "taxId": {
                      "type": "string",
                      "example": "123-45-6789"
                    },
                    "website": {
                      "type": "string",
                      "example": "https://techhaven.com"
                    },
                    "description": {
                      "type": "string",
                      "example": "We sell high-quality tech products at affordable prices"
                    },
                    "logo": {
                      "type": "string",
                      "format": "binary",
                      "description": "Company logo (base64 encoded or URL)"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Seller application submitted successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Seller application submitted successfully and waiting for approval"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "applicationId": {
                            "type": "string",
                            "example": "60d0fe4f5311236168a109cd"
                          },
                          "status": {
                            "type": "string",
                            "example": "pending"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid or missing application details"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can apply to become sellers"
            },
            "409": {
              "description": "Conflict - Already a seller or have a pending application"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers/{sellerId}/statistics": {
        "get": {
          "summary": "Get seller statistics for specific seller",
          "description": "Get sales statistics for a specific seller. Sellers can only view their own statistics, while admins can view any seller's statistics.",
          "tags": [
            "Sellers"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "sellerId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the seller"
            },
            {
              "in": "query",
              "name": "period",
              "schema": {
                "type": "string",
                "enum": [
                  "daily",
                  "weekly",
                  "monthly",
                  "yearly"
                ],
                "default": "monthly"
              },
              "description": "Time period for statistics"
            },
            {
              "in": "query",
              "name": "from",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Start date (YYYY-MM-DD)"
            },
            {
              "in": "query",
              "name": "to",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "End date (YYYY-MM-DD)"
            }
          ],
          "responses": {
            "200": {
              "description": "Seller statistics retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "totalSales": {
                            "type": "number",
                            "example": 25000
                          },
                          "totalOrders": {
                            "type": "number",
                            "example": 150
                          },
                          "averageOrderValue": {
                            "type": "number",
                            "example": 166.67
                          },
                          "salesByPeriod": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "period": {
                                  "type": "string",
                                  "example": "2023-05"
                                },
                                "sales": {
                                  "type": "number",
                                  "example": 5200
                                },
                                "orders": {
                                  "type": "number",
                                  "example": 32
                                }
                              }
                            }
                          },
                          "topProducts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "sales": {
                                  "type": "number"
                                },
                                "quantity": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Not authorized to view these statistics"
            },
            "404": {
              "description": "Seller not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers/statistics": {
        "get": {
          "summary": "Get current seller statistics",
          "description": "Get sales statistics for the authenticated seller",
          "tags": [
            "Sellers"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "query",
              "name": "period",
              "schema": {
                "type": "string",
                "enum": [
                  "daily",
                  "weekly",
                  "monthly",
                  "yearly"
                ],
                "default": "monthly"
              },
              "description": "Time period for statistics"
            },
            {
              "in": "query",
              "name": "from",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Start date (YYYY-MM-DD)"
            },
            {
              "in": "query",
              "name": "to",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "End date (YYYY-MM-DD)"
            }
          ],
          "responses": {
            "200": {
              "description": "Seller statistics retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "totalSales": {
                            "type": "number",
                            "example": 25000
                          },
                          "totalOrders": {
                            "type": "number",
                            "example": 150
                          },
                          "averageOrderValue": {
                            "type": "number",
                            "example": 166.67
                          },
                          "salesByPeriod": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "period": {
                                  "type": "string",
                                  "example": "2023-05"
                                },
                                "sales": {
                                  "type": "number",
                                  "example": 5200
                                },
                                "orders": {
                                  "type": "number",
                                  "example": 32
                                }
                              }
                            }
                          },
                          "topProducts": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "sales": {
                                  "type": "number"
                                },
                                "quantity": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - User is not a seller"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers/orders": {
        "get": {
          "summary": "Get orders for the current seller",
          "description": "Retrieve orders that contain products sold by the authenticated seller",
          "tags": [
            "Sellers"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "description": "Page number"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50,
                "default": 10
              },
              "description": "Number of orders per page"
            },
            {
              "in": "query",
              "name": "sort",
              "schema": {
                "type": "string",
                "enum": [
                  "createdAt",
                  "-createdAt",
                  "totalPrice",
                  "-totalPrice"
                ],
                "default": "-createdAt"
              },
              "description": "Sort orders by field"
            },
            {
              "in": "query",
              "name": "status",
              "schema": {
                "type": "string",
                "enum": [
                  "pending",
                  "processing",
                  "shipped",
                  "delivered",
                  "cancelled"
                ]
              },
              "description": "Filter by order status"
            },
            {
              "in": "query",
              "name": "paymentMethod",
              "schema": {
                "type": "string",
                "enum": [
                  "cod",
                  "card",
                  "wallet",
                  "upi",
                  "netbanking"
                ]
              },
              "description": "Filter by payment method"
            },
            {
              "in": "query",
              "name": "startDate",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter orders from this date (YYYY-MM-DD)"
            },
            {
              "in": "query",
              "name": "endDate",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter orders until this date (YYYY-MM-DD)"
            },
            {
              "in": "query",
              "name": "minAmount",
              "schema": {
                "type": "number",
                "minimum": 0
              },
              "description": "Minimum order amount"
            },
            {
              "in": "query",
              "name": "maxAmount",
              "schema": {
                "type": "number",
                "minimum": 0
              },
              "description": "Maximum order amount"
            }
          ],
          "responses": {
            "200": {
              "description": "Orders retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Seller orders retrieved successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "docs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string",
                                  "example": "60d0fe4f5311236168a109ca"
                                },
                                "orderNumber": {
                                  "type": "string",
                                  "example": "ORD-123456"
                                },
                                "user": {
                                  "type": "object",
                                  "properties": {
                                    "_id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "email": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "product": {
                                        "type": "object",
                                        "properties": {
                                          "_id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "images": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "quantity": {
                                        "type": "number"
                                      },
                                      "price": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                },
                                "sellerItemsTotal": {
                                  "type": "number",
                                  "example": 2345.5
                                },
                                "status": {
                                  "type": "string",
                                  "example": "processing"
                                },
                                "paymentMethod": {
                                  "type": "string",
                                  "example": "card"
                                },
                                "isPaid": {
                                  "type": "boolean",
                                  "example": true
                                },
                                "paidAt": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "isDelivered": {
                                  "type": "boolean",
                                  "example": false
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            }
                          },
                          "totalDocs": {
                            "type": "number",
                            "example": 50
                          },
                          "limit": {
                            "type": "number",
                            "example": 10
                          },
                          "totalPages": {
                            "type": "number",
                            "example": 5
                          },
                          "page": {
                            "type": "number",
                            "example": 1
                          },
                          "pagingCounter": {
                            "type": "number",
                            "example": 1
                          },
                          "hasPrevPage": {
                            "type": "boolean",
                            "example": false
                          },
                          "hasNextPage": {
                            "type": "boolean",
                            "example": true
                          },
                          "prevPage": {
                            "type": "number",
                            "nullable": true,
                            "example": null
                          },
                          "nextPage": {
                            "type": "number",
                            "example": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Not authenticated"
            },
            "403": {
              "description": "Forbidden - Not authorized"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers/{sellerId}/orders": {
        "get": {
          "summary": "Get orders for a specific seller (Admin only)",
          "description": "Retrieve orders that contain products sold by a specific seller (Admin access required)",
          "tags": [
            "Sellers"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "sellerId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the seller"
            },
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "description": "Page number"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 50,
                "default": 10
              },
              "description": "Number of orders per page"
            },
            {
              "in": "query",
              "name": "sort",
              "schema": {
                "type": "string",
                "enum": [
                  "createdAt",
                  "-createdAt",
                  "totalPrice",
                  "-totalPrice"
                ],
                "default": "-createdAt"
              },
              "description": "Sort orders by field"
            },
            {
              "in": "query",
              "name": "status",
              "schema": {
                "type": "string",
                "enum": [
                  "pending",
                  "processing",
                  "shipped",
                  "delivered",
                  "cancelled"
                ]
              },
              "description": "Filter by order status"
            },
            {
              "in": "query",
              "name": "paymentMethod",
              "schema": {
                "type": "string",
                "enum": [
                  "cod",
                  "card",
                  "wallet",
                  "upi",
                  "netbanking"
                ]
              },
              "description": "Filter by payment method"
            },
            {
              "in": "query",
              "name": "startDate",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter orders from this date (YYYY-MM-DD)"
            },
            {
              "in": "query",
              "name": "endDate",
              "schema": {
                "type": "string",
                "format": "date"
              },
              "description": "Filter orders until this date (YYYY-MM-DD)"
            },
            {
              "in": "query",
              "name": "minAmount",
              "schema": {
                "type": "number",
                "minimum": 0
              },
              "description": "Minimum order amount"
            },
            {
              "in": "query",
              "name": "maxAmount",
              "schema": {
                "type": "number",
                "minimum": 0
              },
              "description": "Maximum order amount"
            }
          ],
          "responses": {
            "200": {
              "description": "Orders retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "success": {
                        "type": "boolean",
                        "example": true
                      },
                      "message": {
                        "type": "string",
                        "example": "Seller orders retrieved successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "docs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string",
                                  "example": "60d0fe4f5311236168a109ca"
                                },
                                "orderNumber": {
                                  "type": "string",
                                  "example": "ORD-123456"
                                },
                                "user": {
                                  "type": "object",
                                  "properties": {
                                    "_id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "email": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "items": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "product": {
                                        "type": "object",
                                        "properties": {
                                          "_id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "images": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "quantity": {
                                        "type": "number"
                                      },
                                      "price": {
                                        "type": "number"
                                      }
                                    }
                                  }
                                },
                                "sellerItemsTotal": {
                                  "type": "number",
                                  "example": 2345.5
                                },
                                "status": {
                                  "type": "string",
                                  "example": "processing"
                                },
                                "paymentMethod": {
                                  "type": "string",
                                  "example": "card"
                                },
                                "isPaid": {
                                  "type": "boolean",
                                  "example": true
                                },
                                "paidAt": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "isDelivered": {
                                  "type": "boolean",
                                  "example": false
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            }
                          },
                          "totalDocs": {
                            "type": "number",
                            "example": 50
                          },
                          "limit": {
                            "type": "number",
                            "example": 10
                          },
                          "totalPages": {
                            "type": "number",
                            "example": 5
                          },
                          "page": {
                            "type": "number",
                            "example": 1
                          },
                          "pagingCounter": {
                            "type": "number",
                            "example": 1
                          },
                          "hasPrevPage": {
                            "type": "boolean",
                            "example": false
                          },
                          "hasNextPage": {
                            "type": "boolean",
                            "example": true
                          },
                          "prevPage": {
                            "type": "number",
                            "nullable": true,
                            "example": null
                          },
                          "nextPage": {
                            "type": "number",
                            "example": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Not authenticated"
            },
            "403": {
              "description": "Forbidden - Not authorized to view these orders"
            },
            "404": {
              "description": "Seller not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers": {
        "get": {
          "summary": "Get all sellers",
          "description": "Retrieve a list of all sellers with filtering and pagination. Admin access only.",
          "tags": [
            "Sellers"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "query",
              "name": "status",
              "schema": {
                "type": "string",
                "enum": [
                  "active",
                  "inactive",
                  "pending",
                  "rejected"
                ]
              },
              "description": "Filter by seller status"
            },
            {
              "in": "query",
              "name": "sort",
              "schema": {
                "type": "string",
                "enum": [
                  "newest",
                  "oldest",
                  "name",
                  "sales"
                ],
                "default": "newest"
              },
              "description": "Sort order for sellers"
            },
            {
              "in": "query",
              "name": "page",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "default": 1
              },
              "description": "Page number"
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 10
              },
              "description": "Number of sellers per page"
            },
            {
              "in": "query",
              "name": "search",
              "schema": {
                "type": "string"
              },
              "description": "Search by seller name or email"
            }
          ],
          "responses": {
            "200": {
              "description": "List of sellers retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "sellers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "email": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "commissionRate": {
                                  "type": "number"
                                },
                                "productsCount": {
                                  "type": "number"
                                },
                                "rating": {
                                  "type": "number"
                                },
                                "joinedAt": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "totalSales": {
                                  "type": "number"
                                }
                              }
                            }
                          },
                          "pagination": {
                            "type": "object",
                            "properties": {
                              "total": {
                                "type": "integer",
                                "example": 45
                              },
                              "pages": {
                                "type": "integer",
                                "example": 5
                              },
                              "page": {
                                "type": "integer",
                                "example": 1
                              },
                              "limit": {
                                "type": "integer",
                                "example": 10
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Not authorized to access this resource"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers/{sellerId}/commission": {
        "patch": {
          "summary": "Update seller commission rate",
          "description": "Update the commission rate for a specific seller. Admin access only.",
          "tags": [
            "Sellers"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "sellerId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the seller"
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "commissionRate"
                  ],
                  "properties": {
                    "commissionRate": {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 100,
                      "example": 15,
                      "description": "Commission rate percentage (0-100)"
                    },
                    "note": {
                      "type": "string",
                      "example": "Updated due to increased sales volume"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Commission rate updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Seller commission rate updated successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "commissionRate": {
                            "type": "number",
                            "example": 15
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid commission rate"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Not authorized to perform this action"
            },
            "404": {
              "description": "Seller not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/sellers/create-admin": {
        "post": {
          "summary": "Create admin or manager user",
          "description": "Create a new user with admin or manager role. Super admin access only.",
          "tags": [
            "Sellers"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "name",
                    "email",
                    "password",
                    "role"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Admin User"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "admin@example.com"
                    },
                    "password": {
                      "type": "string",
                      "format": "password",
                      "example": "StrongPassword123",
                      "minLength": 8
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "admin",
                        "manager"
                      ],
                      "example": "admin"
                    },
                    "phone": {
                      "type": "string",
                      "example": "+1 212-555-1234"
                    },
                    "permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "manage_users",
                        "manage_products",
                        "manage_orders"
                      ]
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Admin user created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Admin user created successfully"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "role": {
                            "type": "string"
                          },
                          "permissions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid input data"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only super admins can create admin users"
            },
            "409": {
              "description": "Conflict - Email already in use"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/wishlist": {
        "get": {
          "summary": "Get user's wishlist",
          "description": "Retrieve the authenticated user's wishlist items",
          "tags": [
            "Wishlist"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "User's wishlist successfully retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "wishlist": {
                            "$ref": "#/components/schemas/Wishlist"
                          },
                          "products": {
                            "type": "array",
                            "description": "Populated product details for items in wishlist",
                            "items": {
                              "type": "object",
                              "properties": {
                                "_id": {
                                  "type": "string",
                                  "example": "60d0fe4f5311236168a109cc"
                                },
                                "name": {
                                  "type": "string",
                                  "example": "Wireless Earbuds"
                                },
                                "price": {
                                  "type": "number",
                                  "example": 49.99
                                },
                                "images": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "image1.jpg",
                                    "image2.jpg"
                                  ]
                                },
                                "rating": {
                                  "type": "number",
                                  "example": 4.5
                                },
                                "addedAt": {
                                  "type": "string",
                                  "format": "date-time"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can access wishlist"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "post": {
          "summary": "Add product to wishlist",
          "description": "Add a product to the authenticated user's wishlist",
          "tags": [
            "Wishlist"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "productId"
                  ],
                  "properties": {
                    "productId": {
                      "type": "string",
                      "description": "ID of the product to add to wishlist",
                      "example": "60d0fe4f5311236168a109cc"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Product added to wishlist successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Product added to wishlist"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Wishlist"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request - Invalid product ID or product already in wishlist"
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can modify wishlist"
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        },
        "delete": {
          "summary": "Clear wishlist",
          "description": "Remove all products from the authenticated user's wishlist",
          "tags": [
            "Wishlist"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Wishlist cleared successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Wishlist cleared successfully"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can modify wishlist"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/wishlist/{productId}": {
        "delete": {
          "summary": "Remove product from wishlist",
          "description": "Remove a specific product from the authenticated user's wishlist",
          "tags": [
            "Wishlist"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "productId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the product to remove from wishlist"
            }
          ],
          "responses": {
            "200": {
              "description": "Product removed from wishlist successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "message": {
                        "type": "string",
                        "example": "Product removed from wishlist"
                      },
                      "data": {
                        "$ref": "#/components/schemas/Wishlist"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can modify wishlist"
            },
            "404": {
              "description": "Product not found in wishlist"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/wishlist/check/{productId}": {
        "get": {
          "summary": "Check if product is in wishlist",
          "description": "Check if a specific product exists in the authenticated user's wishlist",
          "tags": [
            "Wishlist"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "parameters": [
            {
              "in": "path",
              "name": "productId",
              "schema": {
                "type": "string"
              },
              "required": true,
              "description": "ID of the product to check in wishlist"
            }
          ],
          "responses": {
            "200": {
              "description": "Product wishlist status retrieved",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "inWishlist": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can access wishlist"
            },
            "404": {
              "description": "Product not found"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/wishlist/count": {
        "get": {
          "summary": "Get wishlist count",
          "description": "Get the number of products in the authenticated user's wishlist",
          "tags": [
            "Wishlist"
          ],
          "security": [
            {
              "bearerAuth": []
            }
          ],
          "responses": {
            "200": {
              "description": "Wishlist count retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "success"
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "count": {
                            "type": "integer",
                            "example": 5
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - Missing or invalid token"
            },
            "403": {
              "description": "Forbidden - Only customers can access wishlist"
            },
            "500": {
              "description": "Server error"
            }
          }
        }
      },
      "/": {
        "get": {
          "summary": "API root endpoint",
          "description": "Returns basic API information",
          "tags": [
            "Root"
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "example": "Welcome to MultiVendor E-commerce API"
                      },
                      "version": {
                        "type": "string",
                        "example": "1.0.0"
                      },
                      "documentation": {
                        "type": "string",
                        "example": "/api-docs"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/health": {
        "get": {
          "summary": "Health check endpoint",
          "description": "Returns server health status",
          "tags": [
            "Health"
          ],
          "responses": {
            "200": {
              "description": "Server is healthy",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "ok"
                      },
                      "message": {
                        "type": "string",
                        "example": "Server is running"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "tags": [
      {
        "name": "Addresses",
        "description": "API endpoints for managing user addresses"
      },
      {
        "name": "Authentication",
        "description": "API endpoints for user authentication"
      },
      {
        "name": "Cart",
        "description": "API endpoints for managing shopping cart"
      },
      {
        "name": "Categories",
        "description": "API endpoints for managing product categories"
      },
      {
        "name": "Coupons",
        "description": "API endpoints for managing discount coupons"
      },
      {
        "name": "Orders",
        "description": "API endpoints for managing orders"
      },
      {
        "name": "Payments",
        "description": "Payment processing API endpoints"
      },
      {
        "name": "Products",
        "description": "API endpoints for managing products"
      },
      {
        "name": "Sellers",
        "description": "API endpoints for managing sellers"
      },
      {
        "name": "Wishlist",
        "description": "API endpoints for managing customer wishlists"
      }
    ]
  }